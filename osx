#!/usr/bin/env ruby

require 'yaml'
require 'io/console'

def bool_from_string(bool_string)
  bool_string != 'false'
end

def string_from_bool(bool)
  if bool
    'true'
  else
    'false'
  end
end

def select(values, index)
  selected = index
  $stdin.raw do |h|
    loop do
      print "\r[#{values[selected]}]"
      c = h.getch
      case c
      when 'j'
        selected = [values.count - 1, selected + 1].min
      when 'k'
        selected = [0, selected - 1].max
      else
        case c.codepoints[0]
        when 0x0d, 0x71
          break
        else
          puts 'bad input'
        end
      end
    end
  end
  puts "\nselected value #{values[selected]}"
  selected
end

def get_volume_settings
  if /output volume:([0-9]+), input volume:([0-9]+), alert volume:([0-9]+), output muted:(false|true)/ =~ `osascript -e 'get volume settings'`
    {
      output: $1.to_i,
      input: $2.to_i,
      alert: $3.to_i,
      muted: bool_from_string($4)
    }
  end
end

def set_output_volume(n)
  `osascript -e 'set volume output volume #{n}'`
end

def set_muted(muted)
  `osascript -e "set volume output muted #{string_from_bool(muted)}"`
end

def sleep
  `pmset sleepnow`
end

def get_airport_power(device)
  if /Wi-Fi Power \([^)]+\): (Off|On)/ =~ `networksetup -getairportpower #{device}`
    return $1 != 'Off'
  end
end

def set_airport_power(device, on)
  def on_off_from_bool(bool)
    if bool
      'on'
    else
      'off'
    end
  end
  `networksetup -setairportpower #{device} #{on_off_from_bool(on)}`
end

def die(message)
  $stderr.puts message
  exit 1
end

def load_config
  config = { airport: 'en1' }
  path = File.expand_path '~/.osx.yaml'
  if File.exists? path
    yaml = YAML.load_file path
    yaml.each { |k, v| config[k.to_sym] = v }
  end
  config
end

cmd = ARGV.shift
die 'no command given' if cmd.nil?
case cmd
when 'volume-settings'
  puts get_volume_settings
when 'volume'
  subcmd = ARGV.shift
  case subcmd
  when nil
    values = (0..10).to_a.map { |x| x*10 }.reverse
    index = select(values, 10 - get_volume_settings[:output]/10)
    set_output_volume(values[index])
  when 'up'
    set_output_volume([get_volume_settings[:output] + 5, 100].min)
  when 'down'
    set_output_volume([get_volume_settings[:output] - 5, 0].max)
  when 'set'
    die 'unimplemented'
  else
    die "unknown command: #{cmd} #{subcmd}"
  end
when 'mute'
  set_muted(true)
when 'unmute'
  set_muted(false)
when 'toggle-muted'
  set_muted(!get_volume_settings[:muted])
when 'sleep'
  sleep
when 'airport', 'wifi'
  subcmd = ARGV.shift
  case subcmd
  when 'on'
    set_airport_power(load_config[:airport], true)
  when 'off'
    set_airport_power(load_config[:airport], false)
  when nil
    puts get_airport_power(load_config[:airport])
  else
    die "unknown command: #{cmd} #{subcmd}"
  end
else
  die "unknown command: #{cmd}"
end
